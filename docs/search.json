[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Docker Workshop üê≥",
    "section": "",
    "text": "Welcome to the Docker for Data Science workshop! As its name implies, this workshop focuses on the foundations of Docker with data science applications. That includes the following topics:",
    "crumbs": [
      "Home",
      "Docker Workshop üê≥"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "tests/test3.html",
    "href": "tests/test3.html",
    "title": "Test Quarto",
    "section": "",
    "text": "Loading libraries:\n\n\nCode\nimport pandas as pd\n\n\nUse the print command:\n\n\nCode\nprint(\"Hello World!\")\n\n\nHello World!"
  },
  {
    "objectID": "tests/test2.html",
    "href": "tests/test2.html",
    "title": "sdsu-docker-workshop",
    "section": "",
    "text": "import pandas as pd\n\n\nprint(\"Hello World!\")\n\nHello World!"
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Docker Workshop üê≥",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe main learning object is to motivate data scientists and other partitioners to use containers in their workflow. Docker has some learning curve, and the goal of this workshop is to reduce the entry barrier for new learners. No prior knowledge of Docker is needed, but it is recommended to have some familiarity with basic command line tools.\nBy the end of this tutorial, you will:\n\nUnderstand the general applications of Docker, and in particular, the ones for data science\nLearn about the advantages and disadvantages of using Docker\nAble to design, build, and run a container",
    "crumbs": [
      "Home",
      "Docker Workshop üê≥"
    ]
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Docker Workshop üê≥",
    "section": "Schedule",
    "text": "Schedule\nThe workshop will take place on Feb 5: 1:00 - 5:00 pm @ Student Union:\n\n1:00 - 1:30 Introduction to Docker\n1:30 - 2:00 General settings\n2:00 - 2:15 Workflow\n2:15 - 2:30 Break\n2:15 - 2:45 The Dockerfile\n2:45 - 3:15 Build\n3:15 - 3:45 Run\n3:45 - 4:15 Docker Compose\n4:15 - 5:00 General topics",
    "crumbs": [
      "Home",
      "Docker Workshop üê≥"
    ]
  },
  {
    "objectID": "index.html#general-requirements",
    "href": "index.html#general-requirements",
    "title": "Docker Workshop üê≥",
    "section": "General Requirements",
    "text": "General Requirements\nTo best utilize the workshop time, please install Docker Desktop prior to the workshop and set up a Docker Hub account. Docker Desktop is free for nonenterprise use cases.\nI am going to use VScode throughout the demos, and I recommend installing VScode as well to follow along.\nThe Settings section provides the installation instructions.",
    "crumbs": [
      "Home",
      "Docker Workshop üê≥"
    ]
  },
  {
    "objectID": "01-settings.html",
    "href": "01-settings.html",
    "title": "Settings",
    "section": "",
    "text": "To follow this tutorial, you‚Äôll need to set up Docker Desktop and VScode. Plus, you‚Äôll have to create an account on Docker Hub. This section is dedicated to the workshop settings and covers the installation and configuration of Docker and VScode.",
    "crumbs": [
      "Home",
      "Settings"
    ]
  },
  {
    "objectID": "01-settings.html#setting-docker",
    "href": "01-settings.html#setting-docker",
    "title": "Settings",
    "section": "Setting Docker",
    "text": "Setting Docker\nVarious ways exist to build and run Docker images on different operations systems. For the purpose of this guide, we will be utilizing Docker Desktop. It is a user-friendly container management interface that is compatible with MacOS, Windows, and Linux operating systems.\nNote: Docker Desktop is free for personal use but requires a license for commercial use. For further information, please refer to https://www.docker.com/pricing/.\nTo install Docker Desktop, go to Docker website and follow the installation instructions according to your OS:\n\n\n\nFigure 1 - Docker Desktop download page",
    "crumbs": [
      "Home",
      "Settings"
    ]
  },
  {
    "objectID": "01-settings.html#docker-hub",
    "href": "01-settings.html#docker-hub",
    "title": "Settings",
    "section": "Docker Hub",
    "text": "Docker Hub\nContainer Registry has a similar functionality as Github for code, and it uses to store and share images. There are many container registries, and the most common is Docker Hub. We will use throughout the tutorial Docker Hub to pull different images, such as Python built-in images. To register and create an account go to https://hub.docker.com and follow the registration instructions.\nAfter installing Docker Desktop and setting account on Docker Hub, open Docker Desktop, and from the command line, login to Docker Hub:\n docker login\nYou will have to enter your username and password, and you should expect the following output if the login is successful:\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: rkrispin\nPassword:\nLogin Succeeded\n\nLogging in with your password grants your terminal complete access to your account.\nFor better security, log in with a limited-privilege personal access token. Learn more at https://docs.docker.com/go/access-tokens/\nNote: Docker Hub is completely public (for the free tier). Any image you push and store there will be available for all other users. Regardless if your container registry is public or not, NEVER store credentials, passwords, or any other sensitive information on your Docker images.\n\nHello World!\nThere is no better way to test if Docker was installed properly than by running whalesay (or üê≥ say) Docker‚Äôs most Hello World! common example. The whalesay is an adaption of the Linux cowsay (üêÆ say) game using a whale instead of a cow to print some text. Let‚Äôs run the below code from the terminal to print Welcome to the Docker for Data Science Workshop! üëãüèº:\ndocker run docker/whalesay cowsay Welcome to the Docker for Data Science Workshop! üëãüèº\nIf this is the first time you are using Docker or your first time using the whalesay image you should expect the following message:\nUnable to find image 'docker/whalesay:latest' locally\nThat is a generic message that notifies that the requested image cannot be found locally, and Docker will try to pull the image from the hub (if specified) and follow by downloading the image:\nlatest: Pulling from docker/whalesay\nImage docker.io/docker/whalesay:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image for better future compatibility. More information at https://docs.docker.com/registry/spec/deprecated-schema-v1/\ne190868d63f8: Pull complete\n909cd34c6fd7: Pull complete\n0b9bfabab7c1: Pull complete\na3ed95caeb02: Pull complete\n00bf65475aba: Pull complete\nc57b6bcc83e3: Pull complete\n8978f6879e2f: Pull complete\n8eed3712d2cf: Pull complete\nDigest: sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b\nStatus: Downloaded newer image for docker/whalesay:latest\nAnd this is the expected output:\n\n/ Welcome to the Docker for Data Science \\\n\\ Workshop! üëãüèº                           /\n ----------------------------------------\n    \\\n     \\\n      \\\n                    ##        .\n              ## ## ##       ==\n           ## ## ## ##      ===\n       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n       \\______ o          __/\n        \\    \\        __/\n          \\____\\______/ \nIf you are able to run the whalesay app you are ready to get started with Docker.",
    "crumbs": [
      "Home",
      "Settings"
    ]
  },
  {
    "objectID": "01-settings.html#installing-vscode",
    "href": "01-settings.html#installing-vscode",
    "title": "Settings",
    "section": "Installing VScode",
    "text": "Installing VScode\nInstalling VScode is straightforward - go to the VScode website https://code.visualstudio.com/ and click on the Download button (purple rectangle on the screenshot):\n\n\n\nFigure 2 - Visual Studio Code download page\n\n\nDownload the installation file and follow the instructions.\nTo set the Python environment with Docker in VScode we will need the following extensions:\n\nDev Containers - this extension enables to open a folder and execute a code inside a Docker container (more info available here)\nPython - the main Python plug-in for VScode, enables to execute, debugging, code navigation, code formatting, etc. (more info available here)\n\nHere is how to install an extension on VScode: - Click the Extensions button on the left menu (mark with a purple arrow on the screenshot below) - Type the extension name on the search menu (see the yellow rectangular). You can see the search results below, and clicking on each extension will open a window with the extension details. - Last but not least, Click the install button (see the green rectangular) to install the extension\n\n\n\nFigure 3 - Steps to install extension on VScode\n\n\n\nNote: The Dev Containers extension is required to launch the dockerized environment. We will see later in this tutorial how to set and install the necessary extensions for your dockerized environment automatically with the devcontainer.json file.",
    "crumbs": [
      "Home",
      "Settings"
    ]
  },
  {
    "objectID": "03-the_dockerfile.html",
    "href": "03-the_dockerfile.html",
    "title": "The Dockerfile",
    "section": "",
    "text": "The Dockerfile provides a set of instructions for the Docker engine about how to build the image. You can think about it as the image‚Äôs recipe. It has its own unique and intuitive syntax using the following structure:\nCOMMAND some instructions\nFor example, the following Dockerfile imports the official Python (version 3.10) image as the base image and then using the apt-get update and apt-get install to install the curl library :\n./examples/ex-1/Dockerfile\nFROM python:3.10\n\nLABEL example=1\n\nENV PYTHON_VER=3.10\n\nRUN apt-get update && apt-get install -y --no-install-recommends curl\nIn a nutshell, we used the FROM command to specify the image we want to import from the Docker registry (don‚Äôt forget to login to the Docker registry service you are using before building the image!). The LABEL command is used to set labels or comments, and the ENV command is to set environment variables. Last but not least, the RUN command is used to run a command on the command line, in this case, to install the curl library.\nLet‚Äôs now review the Dockerfile core commands:\n\nFROM - Defines the base image to use for the image‚Äôs build. In most cases, unless you are building the image from scratch, you will use some base image with some pre-installed OS and some dependencies. For example, in this tutorial, we will import as our base image the official Python image\nLABEL - Enables to add information about the image to the image‚Äôs metadata, such as authors, maintainers, license, etc.\nENV - Uses to set environment variables\nARG - Enables to set parameters during the build time\nRUN - Allows executing CLI commands (e.g., pip install ..., apt-get ..., apt-install..., wget..., etc.) during the build time to add additional components to the base image\nCOPY - Enables to copy objects (e.g., files and folders) from your local system to the image\nWORKDIR - Sets the working directory inside the image\nEXPOSE - Defines the port number to expose the image during the run time\nCMD - Sets a default command to execute during the run time of the image\nENDPOINT - Allows configuring a container that will run as an executable\n\nDo not worry if, at this point, you do not fully understand the use cases of some of those commands. It will make more sense when we start to build images in the next section.",
    "crumbs": [
      "Home",
      "The Dockerfile"
    ]
  },
  {
    "objectID": "04-build.html",
    "href": "04-build.html",
    "title": "Docker Build",
    "section": "",
    "text": "Once the Dockerfile is ready, the next step is to build the image using the docker build command from the command line. For example, let‚Äôs build the above Dockerfile using the build command from this repo root folder:\ndocker build . -f ./examples/ex-1/Dockerfile -t rkrispin/vscode-python:ex1 \nHere are the arguments we used with the build command:\n\nThe -f tag defines the Dockerfile path. This argument is optional and should be used if you are calling the build function from a different folder than one of the Dockerfile\nThe . symbol defines the context folder of the files system as the one of the Dockerfile. Although we did not use the file system in this case, this enables us in other cases to call and copy files from our local folder to the image during the build time\nThe -t is used to set the image‚Äôs name and tag (e.g., version). In this case, the image name is rkrispin/vscode-python and the tag is ex1.\n\nYou should expect the following output:\n[+] Building 94.2s (6/6) FINISHED                                                                                                                                                                                                  \n =&gt; [internal] load build definition from Dockerfile                                                                                                                                                                          0.0s\n =&gt; =&gt; transferring dockerfile: 162B                                                                                                                                                                                          0.0s\n =&gt; [internal] load .dockerignore                                                                                                                                                                                             0.0s\n =&gt; =&gt; transferring context: 2B                                                                                                                                                                                               0.0s\n =&gt; [internal] load metadata for docker.io/library/python:3.10                                                                                                                                                                6.0s\n =&gt; [1/2] FROM docker.io/library/python:3.10@sha256:a8462db480ec3a74499a297b1f8e074944283407b7a417f22f20d8e2e1619782                                                                                                         82.1s\n =&gt; =&gt; resolve docker.io/library/python:3.10@sha256:a8462db480ec3a74499a297b1f8e074944283407b7a417f22f20d8e2e1619782                                                                                                          0.0s\n =&gt; =&gt; sha256:a8462db480ec3a74499a297b1f8e074944283407b7a417f22f20d8e2e1619782 1.65kB / 1.65kB                                                                                                                                0.0s\n =&gt; =&gt; sha256:4a1aacea636cab6af8f99f037d1e56a4de97de6025da8eff90b3315591ae3617 2.01kB / 2.01kB                                                                                                                                0.0s\n =&gt; =&gt; sha256:23e11cf6844c334b2970fd265fb09cfe88ec250e1e80db7db973d69d757bdac4 7.53kB / 7.53kB                                                                                                                                0.0s\n =&gt; =&gt; sha256:bba7bb10d5baebcaad1d68ab3cbfd37390c646b2a688529b1d118a47991116f4 49.55MB / 49.55MB                                                                                                                             26.1s\n =&gt; =&gt; sha256:ec2b820b8e87758dde67c29b25d4cbf88377601a4355cc5d556a9beebc80da00 24.03MB / 24.03MB                                                                                                                             11.0s\n =&gt; =&gt; sha256:284f2345db055020282f6e80a646f1111fb2d5dfc6f7ee871f89bc50919a51bf 64.11MB / 64.11MB                                                                                                                             26.4s\n =&gt; =&gt; sha256:fea23129f080a6e28ebff8124f9dc585b412b1a358bba566802e5441d2667639 211.00MB / 211.00MB                                                                                                                           74.5s\n =&gt; =&gt; sha256:7c62c924b8a6474ab5462996f6663e07a515fab7f3fcdd605cae690a64aa01c7 6.39MB / 6.39MB                                                                                                                               28.2s\n =&gt; =&gt; extracting sha256:bba7bb10d5baebcaad1d68ab3cbfd37390c646b2a688529b1d118a47991116f4                                                                                                                                     1.6s\n =&gt; =&gt; sha256:c48db0ed1df2d2df2dccd680323097bafb5decd0b8a08f02684b1a81b339f39b 17.15MB / 17.15MB                                                                                                                             31.9s\n =&gt; =&gt; extracting sha256:ec2b820b8e87758dde67c29b25d4cbf88377601a4355cc5d556a9beebc80da00                                                                                                                                     0.6s\n =&gt; =&gt; sha256:f614a567a40341ac461c855d309737ebccf10a342d9643e94a2cf0e5ff29b6cd 243B / 243B                                                                                                                                   28.4s\n =&gt; =&gt; sha256:00c5a00c6bc24a1c23f2127a05cfddd90865628124100404f9bf56d68caf17f4 3.08MB / 3.08MB                                                                                                                               29.4s\n =&gt; =&gt; extracting sha256:284f2345db055020282f6e80a646f1111fb2d5dfc6f7ee871f89bc50919a51bf                                                                                                                                     2.5s\n =&gt; =&gt; extracting sha256:fea23129f080a6e28ebff8124f9dc585b412b1a358bba566802e5441d2667639                                                                                                                                     6.2s\n =&gt; =&gt; extracting sha256:7c62c924b8a6474ab5462996f6663e07a515fab7f3fcdd605cae690a64aa01c7                                                                                                                                     0.3s\n =&gt; =&gt; extracting sha256:c48db0ed1df2d2df2dccd680323097bafb5decd0b8a08f02684b1a81b339f39b                                                                                                                                     0.5s\n =&gt; =&gt; extracting sha256:f614a567a40341ac461c855d309737ebccf10a342d9643e94a2cf0e5ff29b6cd                                                                                                                                     0.0s\n =&gt; =&gt; extracting sha256:00c5a00c6bc24a1c23f2127a05cfddd90865628124100404f9bf56d68caf17f4                                                                                                                                     0.2s\n =&gt; [2/2] RUN apt-get update && apt-get install -y --no-install-recommends curl                                                                                                                                               5.9s\n =&gt; exporting to image                                                                                                                                                                                                        0.1s\n =&gt; =&gt; exporting layers                                                                                                                                                                                                       0.1s\n =&gt; =&gt; writing image sha256:a8e4c6d06c97e9a331a10128d1ea1fa83f3a525e67c7040c2410940312e946f5                                                                                                                                  0.0s\n =&gt; =&gt; naming to docker.io/rkrispin/vscode-python:ex1  \n\nNote: The above output of the build describes the different layers of the image. Don‚Äôt worry if, at this point, it looks and sounds like gibberish. Reading this output type will be easier after reading the next section, which focuses on the image layers.\nYou can use the docker images command to validate that the image was created successfully:\n&gt;docker images\nREPOSITORY                             TAG       IMAGE ID       CREATED        SIZE\nrkrispin/vscode-python                 ex1       a8e4c6d06c97   43 hours ago   1.02GB\nThe next section will focus on the image layers and caching process.\n\nThe image layers\nThe build process of Docker‚Äôs images is based on layers. Depending on the context, the docker engine takes each one of the Dockerfile commands during the build time and translates it either into layer or metadata. Dockerfile commands, such as FROM and RUN are translated into a layer, and commands, such as LABEL, ARG, ENV, and CMD are translated into metadata. For example, we can observe in the output of the build of rkrispin/vscode-python image above that there are two layers:\n\nThe first layer started with [1/2] FROM..., corresponding to the FROM python:3.10 line on the Dockerfile, which import the Python 3.10 official image\nThe second layer started with [2/2] RUN apt-get..., corresponding to the RUN command on the Dockerfile\n\n\n\n\nFigure 1 - Example of a build output with respect to the Dockerfile\n\n\n\nThe docker inspect command returns the image metadata details in a JSON format. That includes the envrioment variables, labels, layers and general metadata. In the following example, we will us jq to extract the layers information from the metadata JSON file:\n&gt; docker inspect rkrispin/vscode-python:ex1 | jq '.[] | .RootFS'\n{\n  \"Type\": \"layers\",\n  \"Layers\": [\n    \"sha256:332b199f36eb054386cd2931c0824c97c6603903ca252835cc296bacde2913e1\",\n    \"sha256:2f98f42985b15cbe098d2979fa9273e562e79177b652f1208ae39f97ff0424d3\",\n    \"sha256:964529c819bb33d3368962458c1603ca45b933487b03b4fb2754aa55cc467010\",\n    \"sha256:e67fb4bad8f42cca08769ee21bbe15aca61ab97d4a46b181e05fefe3a03ee06d\",\n    \"sha256:037f26f869124174b0d6b6d97b95a5f8bdff983131d5a1da6bc28ddbc73531a5\",\n    \"sha256:737cec5220379f795b727e6c164e36e8e79a51ac66a85b3e91c3f25394d99224\",\n    \"sha256:65f4e45c2715f03ed2547e1a5bdfac7baaa41883450d87d96f877fbe634f41a9\",\n    \"sha256:baef981f26963b264913e79bd0a1472bae389441022d71f559e9d186600d2629\",\n    \"sha256:88e1d36ff4812423afc93d5f6208f2783df314d5ecf6f961325c65e1dbf891da\"\n  ]\n}\n\nAs you can see from the image‚Äôs layers output above, the rkrispin/vscode-python:ex1 image has nine layers. Each layer is represented by its hash key (e.g., sha256:...), and it is cached on the backend. While we saw on the build output that the docker engine triggered two processes from the FROM and RUN commands, we ended up with nine layers as opposed to two. The main reason for that is related to the fact that when importing the baseline image, we inherited the imported image characteristics, including the layers. In this case, we used the FROM to import the official Python image, which included eight layers, and then added the 9th layer by executing the RUN commands. You can test it by pulling the baseline image and using the inspect command to review its layers:\n&gt; docker pull python:3.10\n3.10: Pulling from library/python\nbba7bb10d5ba: Already exists \nec2b820b8e87: Already exists \n284f2345db05: Already exists \nfea23129f080: Already exists \n7c62c924b8a6: Already exists \nc48db0ed1df2: Already exists \nf614a567a403: Already exists \n00c5a00c6bc2: Already exists \nDigest: sha256:a8462db480ec3a74499a297b1f8e074944283407b7a417f22f20d8e2e1619782\nStatus: Downloaded newer image for python:3.10\ndocker.io/library/python:3.10\n\n&gt; docker inspect python:3.10 | jq '.[] | .RootFS'\n{\n  \"Type\": \"layers\",\n  \"Layers\": [\n    \"sha256:332b199f36eb054386cd2931c0824c97c6603903ca252835cc296bacde2913e1\",\n    \"sha256:2f98f42985b15cbe098d2979fa9273e562e79177b652f1208ae39f97ff0424d3\",\n    \"sha256:964529c819bb33d3368962458c1603ca45b933487b03b4fb2754aa55cc467010\",\n    \"sha256:e67fb4bad8f42cca08769ee21bbe15aca61ab97d4a46b181e05fefe3a03ee06d\",\n    \"sha256:037f26f869124174b0d6b6d97b95a5f8bdff983131d5a1da6bc28ddbc73531a5\",\n    \"sha256:737cec5220379f795b727e6c164e36e8e79a51ac66a85b3e91c3f25394d99224\",\n    \"sha256:65f4e45c2715f03ed2547e1a5bdfac7baaa41883450d87d96f877fbe634f41a9\",\n    \"sha256:baef981f26963b264913e79bd0a1472bae389441022d71f559e9d186600d2629\"\n  ]\n}\n\n\nLayers caching\nOne of the cons of Docker is the image build time. As the level of complexity of the Dockerfile is higher (e.g., a large number of dependencies), the longer the build time. Sometimes, your build won‚Äôt execute as expected on the first try. Either some requirements are missing, or something breaks during the build time. This is where the use of caching helps in reducing the image rebuild time. Docker has smart mechanization that identifies if each layer should be built from scratch or can leverage a cached layer and save time. For example, let‚Äôs add to the previous example another command to install the vim editor. Generally, we can (and should) add it to the same apt-get we are using to install the curl package, but for the purpose of showing the layers caching functionality, we will run it separately:\n./examples/ex-2/Dockerfile\nFROM python:3.10\n\nLABEL example=1\n\nENV PYTHON_VER=3.10\n\nRUN apt-get update && apt-get install -y --no-install-recommends curl\n\nRUN apt-get update && apt-get install -y --no-install-recommends vim\nWe will use the below command to build this image and tag it as rkrispin/vscode-python:ex2:\ndocker build . -f ./examples/ex-2/Dockerfile -t rkrispin/vscode-python:ex2 --progress=plain\nYou should expect the following output (if ran the previous build):\n =&gt; [internal] load build definition from Dockerfile                                                                                                                                     0.0s\n =&gt; =&gt; transferring dockerfile: 234B                                                                                                                                                     0.0s\n =&gt; [internal] load .dockerignore                                                                                                                                                        0.0s\n =&gt; =&gt; transferring context: 2B                                                                                                                                                          0.0s\n =&gt; [internal] load metadata for docker.io/library/python:3.10                                                                                                                           0.0s\n =&gt; [1/3] FROM docker.io/library/python:3.10                                                                                                                                             0.0s\n =&gt; CACHED [2/3] RUN apt-get update && apt-get install -y --no-install-recommends curl                                                                                                   0.0s\n =&gt; [3/3] RUN apt-get update && apt-get install -y --no-install-recommends vim                                                                                                          34.3s\n =&gt; exporting to image                                                                                                                                                                   0.4s \n =&gt; =&gt; exporting layers                                                                                                                                                                  0.4s \n =&gt; =&gt; writing image sha256:be39eb0eb986f083a02974c2315258377321a683d8472bac15e8d5694008df35                                                                                             0.0s \n =&gt; =&gt; naming to docker.io/rkrispin/vscode-python:ex2   \nAs can be noticed from the above build output, the first and second layers already exist from the previous build. Therefore, the docker engine adds their cached layers to the image (as opposed to building them from scratch), and just builds the 3rd layer and installs the vim editor.\nNote: By default, the build output is concise and short. You can get more detailed output during the build time by adding the progress argument and setting it to plain:\n&gt; docker build . -f ./examples/ex-2/Dockerfile -t rkrispin/vscode-python:ex2 --progress=plain\n#1 [internal] load .dockerignore\n#1 transferring context: 2B done\n#1 DONE 0.0s\n\n#2 [internal] load build definition from Dockerfile\n#2 transferring dockerfile: 234B done\n#2 DONE 0.0s\n\n#3 [internal] load metadata for docker.io/library/python:3.10\n#3 DONE 0.0s\n\n#4 [1/3] FROM docker.io/library/python:3.10\n#4 DONE 0.0s\n\n#5 [2/3] RUN apt-get update && apt-get install -y --no-install-recommends curl\n#5 CACHED\n\n#6 [3/3] RUN apt-get update && apt-get install -y --no-install-recommends vim\n#6 CACHED\n\n#7 exporting to image\n#7 exporting layers done\n#7 writing image sha256:be39eb0eb986f083a02974c2315258377321a683d8472bac15e8d5694008df35 0.0s done\n#7 naming to docker.io/rkrispin/vscode-python:ex2 done\n#7 DONE 0.0s\nSince we already cached the 3rd layer on the previous build, all the layers in the above output are cached, and the run time is less than 1 second.\nWhen setting your Dockerfile, you should be minded and strategic to the layers caching process. The order of the layers does matter! The following images demonstrate when the docker engine will use cached layers and when to rebuild them. The first image illustrates the initial build:\n\n\n\nFigure 2 - Illustration of initial build of image. The left side represents the Dockerfile‚Äôs commands and the right one the coorisponding layers\n\n\n\nIn this case, we have a Dockerfile with four commands that are translated during the build time into four layers. What will happen if we add a fifth command and place it right after the third one? The docker engine will identify that the first and second commands in the Dockerfile did not change and, therefore, will use the corresponding cached layers (one and two), and rebuild the rest of the layers from scratch:\n\n\n\nFigure 3 - Illustration of the caching process during the rebuild of an image\n\n\n\nWhen planning your Dockerfile, if applicable, a good practice is to place the commands that will most likely stay the same and keep new updates to the end of the file if possible.\nThat was just the tip of the iceberg, and there is much more to learn about Docker. The next section will explore different methods to run Python inside a container.",
    "crumbs": [
      "Home",
      "Docker Build"
    ]
  },
  {
    "objectID": "05-run.html",
    "href": "05-run.html",
    "title": "Docker Run",
    "section": "",
    "text": "In the previous sections, we saw how to define the image requirements with the Dockerfile and build it with the build command. This section focuses on running Python inside a container using the docker run command.\n\nDocker run\nThe docker run or run command enables us to create and run a new container from an image. Typically, the run command is used to launch a dockerized application or server or to execute a code following the below syntax:\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\nFor example, we can use the run command with the official Python 3.10 image:\ndocker run python:3.10 \nSurprisingly (or not), nothing happened. To understand that better, we need to go back to the Dockerfile. Generally, images can be used to run: - Server - Application\nIn both cases, we use the Dockerfile to set and enable launching them during the run time. In the case of a server, we use on the Dockerfile the PORT and CMD commands to set the server‚Äôs port on the image and launch the server, respectively. We then use the run command and add the -p (or --publish list) option to map the server‚Äôs port with a local port. Similarly, to launch an application, we use the CMD command on the Dockerfile to define the launch command during the run time and use the --interactive and --tty options to launch the container in interactive mode, which enables us to access the application.\nLet‚Äôs now go back to the python:3.10 image and use the inspect command to check if the CMD command was defined:\n&gt; docker inspect python:3.10 | jq '.[] | .Config.Cmd'\n[\n  \"python3\"\n]\nNote: We used the jq library again to parse out from the JSON output the CMD metadata\nAs you can see, the CMD on the python:3.10 image is set to run the default Python launch command - python3, which launches Python during the run time. Let‚Äôs now add the --interactive and --tty options to run the container in an interactive mode:\n docker run --interactive --tty python:3.10 \nThis launches the default Python version on the image. We can then test it by using the print command to print Hello World!:\nPython 3.10.12 (main, Jun 14 2023, 18:40:54) [GCC 12.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; print(\"Hello World!\")\nHello World!\n&gt;&gt;&gt; \nOK, we have Python running inside a dockerized environment, so why should we not use it? Mainly due to the following reasons: - This is not a development environment, and it is harder (in my mind) to maintain and develop code from the terminal with respect to Python IDEs such as PyCharm or VScode. - By default, the docker run is an ephemeral process, and therefore, your code is lost when you shut down the container.\nWhile there are ways to overcome the above issues, it is still convoluted and not as efficient as using VScode. In the next section, we will see how to set and run Python code with VScode and the Dev Containers extension.",
    "crumbs": [
      "Home",
      "Docker Run"
    ]
  }
]