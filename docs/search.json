[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Docker Workshop üê≥",
    "section": "",
    "text": "&gt;docker run docker/whalesay cowsay Welcome to the Docker for Data Science Workshop! üëãüèº\n\n/ Welcome to the Docker for Data Science \\\n\\ Workshop! üëãüèº                           /\n ----------------------------------------\n    \\\n     \\\n      \\\n                    ##        .\n              ## ## ##       ==\n           ## ## ## ##      ===\n       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n       \\______ o          __/\n        \\    \\        __/\n          \\____\\______/\nWelcome to the Docker for Data Science workshop! As its name implies, this workshop focuses on the foundations of Docker with data science applications. That includes the following topics: - Settings - Motivation - Workflow - The Dockerfile - Build - Run - Docker Compose",
    "crumbs": [
      "Home",
      "Docker Workshop üê≥"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "tests/test3.html",
    "href": "tests/test3.html",
    "title": "Test Quarto",
    "section": "",
    "text": "Loading libraries:\n\n\nCode\nimport pandas as pd\n\n\nUse the print command:\n\n\nCode\nprint(\"Hello World!\")\n\n\nHello World!"
  },
  {
    "objectID": "tests/test2.html",
    "href": "tests/test2.html",
    "title": "sdsu-docker-workshop",
    "section": "",
    "text": "import pandas as pd\n\n\nprint(\"Hello World!\")\n\nHello World!"
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Docker Workshop üê≥",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe main learning object is to motivate data scientists and other partitioners to use containers in their workflow. Docker has some learning curve, and the goal of this workshop is to reduce the entry barrier for new learners. No prior knowledge of Docker is needed, but it is recommended to have some familiarity with basic command line tools.\nBy the end of this tutorial, you will:\n\nUnderstand the general applications of Docker, and in particular, the ones for data science\nLearn about the advantages and disadvantages of using Docker\nAble to design, build, and run a container",
    "crumbs": [
      "Home",
      "Docker Workshop üê≥"
    ]
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Docker Workshop üê≥",
    "section": "Schedule",
    "text": "Schedule\nThe workshop will take place on Feb 5: 1:00 - 5:00 pm @ Student Union:\n\n1:00 - 1:30 Introduction to Docker\n1:30 - 2:00 General settings\n2:00 - 2:15 Workflow\n2:15 - 2:30 Break\n2:15 - 2:45 The Dockerfile\n2:45 - 3:15 Build\n3:15 - 3:45 Run\n3:45 - 4:15 Docker Compose\n4:15 - 5:00 General topics",
    "crumbs": [
      "Home",
      "Docker Workshop üê≥"
    ]
  },
  {
    "objectID": "index.html#general-requirements",
    "href": "index.html#general-requirements",
    "title": "Docker Workshop üê≥",
    "section": "General Requirements",
    "text": "General Requirements\nTo best utilize the workshop time, please install Docker Desktop prior to the workshop and set up a Docker Hub account. Docker Desktop is free for nonenterprise use cases.\nI am going to use VScode throughout the demos, and I recommend installing VScode as well to follow along.\nThe Settings section provides the installation instructions.",
    "crumbs": [
      "Home",
      "Docker Workshop üê≥"
    ]
  },
  {
    "objectID": "01-settings.html",
    "href": "01-settings.html",
    "title": "Settings",
    "section": "",
    "text": "To follow this tutorial, you‚Äôll need to set up Docker Desktop and VScode. Plus, you‚Äôll have to create an account on Docker Hub. This section is dedicated to the workshop settings and covers the installation and configuration of Docker and VScode.",
    "crumbs": [
      "Home",
      "Settings"
    ]
  },
  {
    "objectID": "01-settings.html#setting-docker",
    "href": "01-settings.html#setting-docker",
    "title": "Settings",
    "section": "Setting Docker",
    "text": "Setting Docker\nVarious ways exist to build and run Docker images on different operations systems. For the purpose of this guide, we will be utilizing Docker Desktop. It is a user-friendly container management interface that is compatible with MacOS, Windows, and Linux operating systems.\nNote: Docker Desktop is free for personal use but requires a license for commercial use. For further information, please refer to https://www.docker.com/pricing/.\nTo install Docker Desktop, go to Docker website and follow the installation instructions according to your OS:\n\n\n\nFigure 1 - Docker Desktop download page",
    "crumbs": [
      "Home",
      "Settings"
    ]
  },
  {
    "objectID": "01-settings.html#docker-hub",
    "href": "01-settings.html#docker-hub",
    "title": "Settings",
    "section": "Docker Hub",
    "text": "Docker Hub\nContainer Registry has a similar functionality as Github for code, and it uses to store and share images. There are many container registries, and the most common is Docker Hub. We will use throughout the tutorial Docker Hub to pull different images, such as Python built-in images. To register and create an account go to https://hub.docker.com and follow the registration instructions.\nAfter installing Docker Desktop and setting account on Docker Hub, open Docker Desktop, and from the command line, login to Docker Hub:\n docker login\nYou will have to enter your username and password, and you should expect the following output if the login is successful:\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: rkrispin\nPassword:\nLogin Succeeded\n\nLogging in with your password grants your terminal complete access to your account.\nFor better security, log in with a limited-privilege personal access token. Learn more at https://docs.docker.com/go/access-tokens/\nNote: Docker Hub is completely public (for the free tier). Any image you push and store there will be available for all other users. Regardless if your container registry is public or not, NEVER store credentials, passwords, or any other sensitive information on your Docker images.\n\nHello World!\nThere is no better way to test if Docker was installed properly than by running whalesay (or üê≥ say) Docker‚Äôs most Hello World! common example. The whalesay is an adaption of the Linux cowsay (üêÆ say) game using a whale instead of a cow to print some text. Let‚Äôs run the below code from the terminal to print Welcome to the Docker for Data Science Workshop! üëãüèº:\ndocker run docker/whalesay cowsay Welcome to the Docker for Data Science Workshop! üëãüèº\nIf this is the first time you are using Docker or your first time using the whalesay image you should expect the following message:\nUnable to find image 'docker/whalesay:latest' locally\nThat is a generic message that notifies that the requested image cannot be found locally, and Docker will try to pull the image from the hub (if specified) and follow by downloading the image:\nlatest: Pulling from docker/whalesay\nImage docker.io/docker/whalesay:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image for better future compatibility. More information at https://docs.docker.com/registry/spec/deprecated-schema-v1/\ne190868d63f8: Pull complete\n909cd34c6fd7: Pull complete\n0b9bfabab7c1: Pull complete\na3ed95caeb02: Pull complete\n00bf65475aba: Pull complete\nc57b6bcc83e3: Pull complete\n8978f6879e2f: Pull complete\n8eed3712d2cf: Pull complete\nDigest: sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b\nStatus: Downloaded newer image for docker/whalesay:latest\nAnd this is the expected output:\n\n/ Welcome to the Docker for Data Science \\\n\\ Workshop! üëãüèº                           /\n ----------------------------------------\n    \\\n     \\\n      \\\n                    ##        .\n              ## ## ##       ==\n           ## ## ## ##      ===\n       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n       \\______ o          __/\n        \\    \\        __/\n          \\____\\______/ \nIf you are able to run the whalesay app you are ready to get started with Docker.",
    "crumbs": [
      "Home",
      "Settings"
    ]
  },
  {
    "objectID": "01-settings.html#installing-vscode",
    "href": "01-settings.html#installing-vscode",
    "title": "Settings",
    "section": "Installing VScode",
    "text": "Installing VScode\nInstalling VScode is straightforward - go to the VScode website https://code.visualstudio.com/ and click on the Download button (purple rectangle on the screenshot):\n\n\n\nFigure 2 - Visual Studio Code download page\n\n\nDownload the installation file and follow the instructions.\nTo set the Python environment with Docker in VScode we will need the following extensions:\n\nDev Containers - this extension enables to open a folder and execute a code inside a Docker container (more info available here)\nPython - the main Python plug-in for VScode, enables to execute, debugging, code navigation, code formatting, etc. (more info available here)\n\nHere is how to install an extension on VScode: - Click the Extensions button on the left menu (mark with a purple arrow on the screenshot below) - Type the extension name on the search menu (see the yellow rectangular). You can see the search results below, and clicking on each extension will open a window with the extension details. - Last but not least, Click the install button (see the green rectangular) to install the extension\n\n\n\nFigure 3 - Steps to install extension on VScode\n\n\n\nNote: The Dev Containers extension is required to launch the dockerized environment. We will see later in this tutorial how to set and install the necessary extensions for your dockerized environment automatically with the devcontainer.json file.",
    "crumbs": [
      "Home",
      "Settings"
    ]
  }
]